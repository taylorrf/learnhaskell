chapter: Começando

title: Preparar, apontar, foi!

text: Ok, vamos começar! Se você é o tipo de pessoa horrível que não lê as introduções das coisas e se você pulou ela, então você irá querer ler a última seção da introdução de qualquer maneira, porque explica o que você precisa para acompanhar este tutorial e como vamos fazer para carregar as funções. A primeira coisa que vamos fazer é rodar o GHC no modo interactivo e chamar alguma função para obter uma base para começar a sentir o Haskell. Abra seu terminal e digite [code]ghci[/code] . Você será agraciado com algo parecido com isto. 

Meus parabéns, você esta no CHGI! O prompt aqui é [code]Prelude&gt;[/code] no entando como isto é demasiadamento longo quando você carrega algumas coisas na sua sesão, nós iremos usar [code]ghci&gt;[/code]. Se você quer ter o mesmo prompt, digite [code]:set prompt "ghci&gt; "[/code]. 


Veja algumas simples operações aritméticas.

Isto é bastante auto-explicativo. Nós podemos utilizar todos operadores comuns em uma só linha e todos suas regras usuais precendentes serão obedecidas. Nós também podemos utilizar parênteses para declarar de forma explicita a operação precedente ou para muda-la.
 
 
Muito legal hein?! Sim, eu sei que não mas tenha paciência comigo. Uma pequena amardilha a se observar aqui é a negação de números. Se você quiser obter números negativos, sempre tenha a operação determinada por parênteses. Fazendo [code]5 * -3[/code] o GHCI irá gritar com você, porém fazendo [code]5 * (-3)[/code] isto irá funcionar perfeitamente.

<a href="http://pt.wikipedia.org/wiki/%C3%81lgebra_booleana" target="_blank">Álgebra booleana</a> também é bastante simples. Você provavelmente já sabe que [code]&amp;&amp;[/code] refere-se a expressão booleana <i>and<i> e [code]||[/code] refere-se a expressão booleana <i>or</i>. [code]not[/code] faz a negação de um [code]True[/code] ou de um [code]False[/code].

Testando para igualdades fica algo assim.

Que tal se fizermos [code]5 + "llama"[/code] ou [code]5 == True[/code]? Bem, se nós tentarmos o primeiro trecho destes código, nós teremos um grande e assustadora mensagem de erro!

What about doing [code]5 + "llama"[/code] or [code]5 == True[/code]? Well, if we try the first snippet, we get a big scary error message!

Credo! O que o GHCI esta dizendo para nós aqui é que [code]"llama"[/code] não é um número e que ele não sabe como adicionar isto ao número 5. Se isso não fosse um  [code]"llama"[/code] mas um [code]"four"[/code] ou um [code]"4"[/code], o Haskell então não iria considerar isto como um número. [code]+[/code] espera-se que tenha a sua esquerda e a sua direita um número.
Se nós tentarmos fazer [code]True == 5[/code], o GHCI irá nos dizer que os tipos são diferentes. Visto que o [code]+[/code] funciona somente em coisas consideradas números, o [code]==[/code] já funciona com quaisquer coisas que podem ser comparadas. O problema é que ambos tem que ser do mesmo tipo de coisa. Não podemos comparar maças com laranjas. Iremos dar uma olhada em tipos um pouco mais tarde. Nota: Você pode fazer [code]5 + 4.0[/code] porque [code]5[/code] é adaptavel e pode atuar como um inteiro ou um ponto-flutuante (floating-point number). [code]4.0[/code] não pode atuar como um inteiro, então o [code]5[/code] é o único que tem que ser adaptado.

Talvez você não saiba mas nós estamos usando função agora o tempo todo. Por exemplo, [code]*[/code] é uma função que pega dois números e então os multiplica. Como você percebe, nós invocamos ela colocando no meio dos dois números. Isto é o que nós chamamos de função <i>inserida</i>. Muitas funções não são usadas com números pois são as funções de <i>prefixo</i>. Vamos dar uma olhada então nisto. 

Funções normalmente são <i>prefixo</i> porém agora não iremos declarar explicitamenete que a função é do formato <i>prefixo<i>, iremos apenas assumir isto. Na maioria das <a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_imperativa">linguagens imperativas</a> as funções são chamadas escrevendo o nome da função e então escrevendo os seus parâmetros entre parênteses, normalmente separados por vírgula. Em Haskell, as funções são chamadas escrevendo o nome da função, com um espaço e então os parâmetros separados por espaços. Inicialmente, vamos tentar chamar uma das das mais chatas funções em Haskell.


A função [code]succ[/code] pega qualquer coisa e então define o seu sucessoe e retorna este sucessor. Como você pode ver, nós apenas separamos o nome da função dos parâmetros com um espaço. Chamar a função com alguns parâmetros também é bastante simples. As funções [code]min[/code] e  [code]max[/code] pegam duas coisas que podem ser colocadas em ordem (como um número!) e retorna aquele que for o menor ou maior. Veja você mesmo:


Utilizar uma função (chamando a função por colocar um espaço depois dela e então ir digitando os seus parâmetros) é o que antecede todo o resto. O que isto significa para nós é que estas duas declarações são equivalentes.

No entando, se nós quisermos ter o sucessor do produto dos números 9 e 10, nós não podemos escrever [code]succ 9 * 10[/code] senão isto irá pegar o sucessor do 9, que seria então a multiplicação por 10. Resultando em 100. Nós devemos escrever [code]succ (9 * 10)[/code] para obter 91.

Se a função recebe dois parâmetros, nós podemos também chama-la como uma função <i>inserida<i/> colocando antes dela aspas simples. Por exemplo, se a função [code]div[/code] recebe dois inteiros e realiza a divisão deles. Fazendo [code]div 92 10[/code] o resultado será 9. Porém quando nós realizamos este tipo de chamada ela fica meio confusa para saber qual número esta dividindo e qual esta sendo dividido. Nós podemos invocar esta função como uma função <i>inserida</i> fazendo [code]92 `div` 10[/code] e lógicamente isto ficará muito mais claro.

Muitas pessoas que vieram de linguagens imperativas tendem a colocar a notação dos parênteses para especificar o uso de funções. Por exemplo, em C, você utiliza parênteses para chamar funções como [code]foo()[/code], [code]bar(1)[/code] ou [code]baz(3, "haha")[/code]. Como dissemos, espaços são utilizados para utilizações funções em Haskell. Então estas funções em Haskell deveriam ser [code]foo[/code], [code]bar 1[/code] e [code]baz 3 "haha"[/code]. Então se você ver algo como [code]bar (bar 3)[/code] não significa que aquela chamada de [code]bar[/code] recebe [code]bar[/code] e [code]3[/code] como parâmetro. Isto significa que nós primeiros chamamos a função [code]bar[/code] com o parâmetro [code]3[/code] para obter algum número e então chamar [code]bar[/code] novamente com este número. Em C, isto seria algo assim [code]bar(bar(3))[/code].
