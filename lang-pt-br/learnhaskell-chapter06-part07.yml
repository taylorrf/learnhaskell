title: Composição de funções

text: Na matemática, <a href="http://pt.wikipedia.org/wiki/Composi%C3%A7%C3%A3o_de_fun%C3%A7%C3%B5es" target="_blank">composição de funções</a> é definida como: [image " (f . g)(x) = f(g(x))"], que significa que compor duas funções produz uma nova função, quando chamamos com um parâmetro, digamos, <i>x</i> é o equivalente a chamar <i>g</i> com o parametro <i>x</i> e então chamar o <i>f</i> com aquele resultado.

Em Haskell, composição de funções é praticamente a mesma coisa. Fazemos uma composição de funções com a função [code].[/code], que é definida como:

Atente na declaração de tipo. [code]f[/code] deve ter como parâmetro um valor com o mesmo tipo do valor retornado de [code]g[/code]. Assim, a função resultante assume um parâmetro do mesmo tipo daquele [code]g[/code] que assume e retorna um valor do mesmo tipo que [code]f[/code] retorna. A expressão [code]negate . (* 3)[/code] retorna uma função que pega um número, multiplica ele por 3 e então faz a negação dele.

Um dos usos para composição de funções é fazer funções em tempo de execução para passar para outras funções. Claro, nós podemos usar lambdas para isso, mas muitas vezes, composição de funções é mais clara e conciso. Digamos que temos ums lista de números e nós queremos então tornar todos em números negativos. Uma forma para fazer isto seria pegar cada número com valor absoluto e então nega-lo, como isso: 

Observe a lambda e como ela se parece com o resultado da composição da função. Usando composição de função, podemos reescrever isto como:

Fabulous! Function composition is right-associative, so we can compose many functions at a time. The expression [code]f (g (z x))[/code] is equivalent to [code](f . g . z) x[/code]. With that in mind, we can turn into

But what about functions that take several parameters? Well, if we want to use them in function composition, we usually have to partially apply them just so much that each function takes just one parameter. [code] sum (replicate 5 (max 6.7 8.9))[/code] can be rewritten as [code](sum . replicate 5 . max 6.7) 8.9[/code] or as [code]sum . replicate 5 . max 6.7 $ 8.9[/code]. What goes on in here is this: a function that takes what [code]max 6.7[/code] takes and applies [code]replicate 5[/code] to it is created. Then, a function that takes the result of that and does a sum of it is created. Finally, that function is called with [code]8.9[/code]. But normally, you just read that as: apply [code]8.9[/code] to [code]max 6.7[/code], then apply [code]replicate 5[/code] to that and then apply [code]sum[/code] to that. If you want to rewrite an expression with a lot of parentheses by using function composition, you can start by putting the last parameter of the innermost function after a [code]$[/code] and then just composing all the other function calls, writing them without their last parameter and putting dots between them. If you have [code]replicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8])))[/code], you can write it as [code]replicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8][/code]. If the expression ends with three parentheses, chances are that if you translate it into function composition, it'll have three composition operators.

Another common use of function composition is defining functions in the so-called point free style (also called the point<i>less</i> style). Take for example this function that we wrote earlier:

The [code]xs[/code] is exposed on both right sides. Because of currying, we can omit the [code]xs[/code] on both sides, because calling [code]foldl (+) 0[/code] creates a function that takes a list. Writing the function as [code]sum' = foldl (+) 0[/code] is called writing it in point free style. How would we write this in point free style?

We can't just get rid of the [code]x[/code] on both right right sides. The [code]x[/code] in the function body has parentheses after it. [code]cos (max 50)[/code] wouldn't make sense. You can't get the cosine of a function. What we can do is express [code]fn[/code] as a composition of functions.

Excellent! Many times, a point free style is more readable and concise, because it makes you think about functions and what kind of functions composing them results in instead of thinking about data and how it's shuffled around. You can take simple functions and use composition as glue to form more complex functions. However, many times, writing a function in point free style can be less readable if a function is too complex. That's why making long chains of function composition is discouraged, although I plead guilty of sometimes being too composition-happy. The prefered style is to use <i>let</i> bindings to give labels to intermediary results or split the problem into sub-problems and then put it together so that the function makes sense to someone reading it instead of just making a huge composition chain.

In the section about maps and filters, we solved a problem of finding the sum of all odd squares that are smaller than 10.000. Here's what the solution looks like when put into a function.

Being such a fan of function composition, I would have probably written that like this:

However, if there was a chance of someone else reading that code, I would have written it like this:

It wouldn't win any code golf competition, but someone reading the function will probably find it easier to read than a composition chain.