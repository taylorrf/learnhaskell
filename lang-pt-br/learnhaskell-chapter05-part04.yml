title: Ordem, rápido!

text: Nós temos uma lista de itens que podem ser ordenados. Seu tipo é uma instância da typeclass [code] Ord [/code] e agora queremos ordená-los! Existe um algoritmo muito legal para ordenação chamado quicksort. É uma maneira muito inteligente de ordenar itens. Para implementá-lo em uma linguagem imperativa precisa-se de 10 ou mais linhas, enquanto em Haskell além de mais mais curta, é elegante. O quicksort se tornou algo como um garoto propaganda do Haskell. Portanto, vamos implementá-lo, mesmo sabendo que logo fazer o quicksort em Haskell é considerado jogo sujo, vamos fazer mesmo assim.

Então, a declaração de tipo será [code] quicksort :: (Ord a) =&gt; [a] -&gt; [a] [/code]. Nada de novo. A condição limite? Lista vazia, como esperado. Uma lista vazia ordenada é uma lista vazia. Agora vem o algoritmo principal: <em>uma lista ordenada é uma lista composta de uma outra lista ordenada até um elemento X de valores menores que X, seguido de outra lista ordenada de valores maiores que X.</em> Note que falamos de duas listas <i>ordenadas</i>, então provavelmente teremos que fazer uma chamada recursiva duas vezes! Note ainda que usamos o verbo <i>ser</i> para definir o algoritmo em vez de dizer <i>faz isto, faz aquilo, então faz aquele outro...</i>. Essa é a beleza da programação funcional! Mas como vamos filtrar listas de menores a maiores que X? List comprehensions. Então, vamos definir de uma vez essa função.




Façamos uma pequena rodada de testes para ver se ela está funcionando corretamente.



Isso ai! Isso que nós queríamos! Então se nós queremos ordenar, digamos, [code] [5,1,9,4,6,7,3] [/code], esse algoritmo primeiro pegará o primeiro elemento que é [code] 5 [/code] colocará entre as listas de números menores e de maiores. Logo, você terá [code] [1,4,3] ++ [5] ++ [9,6,7] [/code]. Nós sabemos que uma vez a lista esteja completamente ordenada, o número [code] 5 [/code] ficará na quarta posição, já que há 3 números menores que ele e 3 números maiores que ele. Agora basta ordenarmos [code] [1,4,3] [/code] e [code] [9,6,7] [/code] para termos uma lista ordenada! Ordenamos as duas listas usando a mesma função. Eventualmente, quebraremos a lista tantas vezes que chegaremos a uma lista vazia que, pela nossa definição, já uma lista ordenada. Aí vai uma ilustração:



Um elemento que já encontrou seu lugar final é representado pela cor [code] laranja [/code]. Se você lê-los da esquerda para a direita, verá a lista ordenada. Apesar de nós termos escolhido comparar todos os elementos com o primeiro, poderíamos ter usado qualquer outro elemento. No quicksort, um elemento com o qual você compara todos os elementos é chamado de pivô. Eles aqui estão em [code] verde [/code]. Nós escolhemos o primeiro porque é mais fácil de pegá-lo, usando pattern matching. Os elementos que são menores que o pivô estão em [code] verde claro [/code] e os elementos maiores que o pivô estão em [code] verde escuro [/code]. E aquele negócio amarelo no meio de tudo representa a execução do quicksort.
