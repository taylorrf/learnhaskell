chapter: Funções de ordem superior*

text:Funções em Haskell podem receber funções como parâmetros e retornar funções. Uma função que realiza alguma destas é chamada de função de ordem superior. Funções de ordem superior não são apenas parte da experiência do Haskell, mas são praticamente a própria experiência. Ocorre que se você quer definir computações definindo o que as coisa <i>são</i> em vez de definir passos que mudam algum estado e talvez fazer uma iteração nestes, funções de alta ordem são indispensáveis. Elas são uma forma muito poderosa de resolver problemas e pensar sobre programas.

title: Funções <i>curried</i>

text: Toda função em Haskell oficialmente recebe apenas um parâmetro. Então, como é possível que nós definimos e usamos várias funções que têm mais de um parâmetro até aqui? Bom, é um truque muito esperto! Todas as funções que aceitaram <i>vários parâmetros</i> até aqui foram <i>funções curried</i>. O que isso significa? Você vai entender melhor com um exemplo. Peguemos nossa boa amiga, a função [code]max[/code]. Parece que ela recebe dois parâmetros e retorna o que é maior. Executar [code]max 4 5[/code] cria primeiro uma função que recebe um parâmetro e retorna ou [code]4[/code] ou este parâmetro, dependendo de qual é o maior. Então, [code]5[/code] é aplicado à esta função e ela produz o resultado desejado. Isso parece um bocado, mas é, de fato, um conceito muito legal. As duas chamadas a seguir são equivalentes:

Colocar um espaço entre duas coisa é simplesmente <b>aplicar a função</b>. O espaço é um mais ou menos como um operador e ele tem a máxima precedência. Examinemos o tipo de [code]max[/code]. É [code]max :: (Ord a) =&gt; a -&gt; a -&gt; a[/code]. Isso também pode ser escrito como [code]max :: (Ord a) =&gt; a -&gt; (a -&gt; a)[/code]. Isso poderia ser lido assim: [code]max[/code] recece um [code]a[/code] e retorna (este é o [code]-&gt;[/code]) uma função que recebe um [code]a[/code] e retorna um [code]a[/code]. É por isso que o tipo do retorno e os parâmetros das funções são simplesmente separados por setas.

Então como isso é bom para nós? Colocando de forma simples, se nós chamamos uma função com parâmetros faltando, recebemos uma função <em>parcialmente aplicada</em>, ou seja, uma função que recebe o número de parâmetros que omitimos. Usar aplicação parcial (chamar uma função faltando parâmetros, se você preferir) é uma maneira de criar funções em tempo real para passá-la a outra função ou alimentá-la com dados.

Dê uma olhada nesta função ridículamente simples:

O que realmente acontece quando executamos [code]multThree 3 5 9[/code] ou [code]((multThree 3) 5) 9[/code]? Primeiro, [code]3[/code] é aplicado à [code]multThree[/code], porque eles estão separados por um espaço. Isso cria uma função que recebe um parâmetro e retorna uma função. Então [code]5[/code] é alocado à esta, que cria uma função que receberá um parâmetro e irá multiplicá-lo por 15. [code]9[/code] é passado à esta função e o resultado é 135 ou algo assim. Lembre-se que o tipo desta função também poderia ser escrito como [code]multThree :: (Num a) =&gt; a -&gt; (a -&gt; (a -&gt; a))[/code]. A coisa antes de [code]-&gt;[/code] é o parâmetro que a função recebe e a que vêm depois é o que ela retorna. Sendo assim, nossa função recebe um [code]a[/code] e retorna a função do tipo [code](Num a) =&gt; a -&gt; (a -&gt; a)[/code]. Da mesma forma, esta função recebe um [code]a[/code] e retorna uma função do tipo [code](Num a) =&gt; a -&gt; a[/code]. E esta função, finalmente, recebe apenas um [code]a[/code] e retorna um [code]a[/code]. Veja isto:

Ao chamar funções com parâmetros faltando, por assim dizer, estamos criando funções em tempo real. E se nós quiséssemos criar uma função que recebe um número e o compara com [code]100[/code]? Poderíamos fazer algo assim:

Se chamamos esta função com [code]99[/code], ela retorna [code]GT[/code]. Barbada. Repare que o [code]x[/code] está à direita em ambos os lados da equação. Agora, pensemos sobre o que [code]compare 100[/code] retorna. Ela retorna uma função que recebe um número e o compara com [code]100[/code]. Uau! Não é esta a função que nós queríamos? Podemos escrever isto assim:

A declaração do tipo permanece idêntica, porque [code]compare 100[/code] retorna uma função. <i>Compare</i> tem o tipo [code](Ord a) =&gt; a -&gt; (a -&gt; Ordering)[/code] e chamando-a com [code]100[/code] retorna um [code](Num a, Ord a) =&gt; a -&gt; Ordering[/code]. A restrição de classe adicional aparece sorrateiramente porque [code]100[/code] também é parte do <i>typeclass</i> [code]Num[/code].

<em>Ei!</em> Tenha certeza que você realmente entendeu como é que funcionanam as funções <i>curried</i> e a aplicação parcial porque elas são muito importantes!

Funções <i>infix</i> também podem ser parcialmente aplicadas usando seções. Para secionar uma função <i>infix</i>, simplesmente coloque ela entre parênteses e passe apenas um parâmetro. Isso cria uma função que recebe um parâmetro e então aplica ele ao lado em que está faltando o operando. Uma função absurdamente trivial:

Executando, digamos, [code]divideByTen 200[/code] é o equivalente a fazer [code]200 / 10[/code], bem como [code](/10) 200[/code]. Uma função que verifica se o caracter passado a ela é uma letra maiúscula:

A única coisa especial sobre seções é o uso do [code]-[/code]. Pela definição de seções, [code](-4)[/code] resultará em uma função que recebe um número e subtrai 4 dele. Entretanto, por conveniência, [code](-4)[/code] significa menos quatro. Logo, se você quer fazer uma função que subtrai 4 de um número que ela recebe como parâmetro, aplique parcialmente a função [code]subtract[/code] como neste exemplo: [code](subtract 4)[/code].

O que acontece se nós tentarmos executar [code]multThree 3 4[/code] no GHCI ao invés de associar isto à um nome com um <i>let</i> ou passando à uma outra função?

O GHCI está nos dizendo que esta expressão produziu uma função do tipo [code]a -&gt; a[/code] mas que ele não sabe como apresentar ela na tela. Funções não são instâncias do typeclass [code]Show[/code], então não temos como ter uma representação legal da <i>string</i> de uma função.

Quando rodamos, digamos, [code]1 + 1[/code] no prompt do GHCI, ele primeiro calcula isso como [code]2[/code] e então chama [code]show[/code] em [code]2[/code] para receber uma representação em forma de texto deste número. E a representação textual de [code]2[/code] é justamente a <i>string</i> [code]"2"[/code], a qual é então apresentada na tela.