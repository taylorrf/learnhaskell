title: Guardas, guardas!

text: Enquanto patterns é um jeito de ter certeza de que um valor tenha a forma desejada e torna possível desmembra-lo, guardas são uma forma de testar se uma (ou mais) propriedades são verdadeiras ou falsas. Se isso te parece demais com um if, está no caminho certo. A diferença é que guardas são mais fáceis de ler quando têm muitas condições e funcionam bem com patterns.

Ao invés de parar para explicar a sintaxe, vamos direto criar uma função usando guardas. Faremos uma função simples que repreende o usuário de uma forma específica, dependendo do seu <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a>. Seu <acronym title="Índice de massa corporal">IMC</acronym> é igual à sua massa dividida pelo quadrado de sua altura. Se seu <acronym title="Índice de massa corporal">IMC</acronym>  está abaixo de 18,5, você é considerado magro. Se está entre 18,5 e 25, é saudável. Entre 25 e 30, acima do peso. Maior, obeso. Então, esta é a função (ela não calcula, somente mostra a mensagem)



Guards are indicated by pipes that follow a function's name and its parameters. Usually, they're indented a bit to the right and lined up. A guard is basically a boolean expression. If it evaluates to [code]True[/code], then the corresponding function body is used. If it evaluates to [code]False[/code], checking drops through to the next guard and so on. If we call this function with [code]24.3[/code], it will first check if that's smaller than or equal to [code]18.5[/code]. Because it isn't, it falls through to the next guard. The check is carried out with the second guard and because 24.3 is less than 25.0, the second string is returned.

This is very reminiscent of a big if else tree in imperative languages, only this is far better and more readable. While big if else trees are usually frowned upon, sometimes a problem is defined in such a discrete way that you can't get around them. Guards are a very nice alternative for this.

Many times, the last guard is [code]otherwise[/code]. [code]otherwise[/code] is defined simply as [code]otherwise = True[/code] and catches everything. This is very similar to patterns, only they check if the input satisfies a pattern but guards check for boolean conditions. If all the guards of a function evaluate to [code]False[/code] (and we haven't provided an [code]otherwise[/code] catch-all guard), evaluation falls through to the next <em>pattern</em>. That's how patterns and guards play nicely together. If no suitable guards or patterns are found, an error is thrown.

Of course we can use guards with functions that take as many parameters as we want. Instead of having the user calculate his own BMI before calling the function, let's modify this function so that it takes a height and width and calculates it for us.



Let's see if I'm fat ...



Yay! I'm not fat! But Haskell just called me ugly. Whatever!

Note that there's no [code]=[/code] right after the function name and its parameters, before the first guard. Many newbies get syntax errors because they sometimes put it there.

Another very simple example: let's implement our own [code]max[/code] function. If you remember, it takes two things that can be compared and returns the larger of them.

Guards can also be written inline, although I'd advise against that because it's less readable, even for very short functions. But to demonstrate, we could write [code]max'[/code] like this:



Ugh! Not very readable at all! Moving on: let's implement our own [code]compare[/code] by using guards.



Nota: Not only can we call functions as infix with backticks, we can also define them using backticks. Sometimes it's easier to read that way.
