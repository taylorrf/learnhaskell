title: Onde!?

text: Na seção anterior, definimos uma função de calculadora de <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a> que era algo parecido com isso:



Note ainda que nos repetimos três vezes. Nós nos repetimos três vezes. Repetir-se (três vezes) no código é tão desejável quando levar um chute bem no meio da testa. Já que repetimos a expressão três vezes, seria melhor se calculássemos apenas uma vez, gravássemos numa variável e usa-la nos próximos comandos ao invés da expressão. Para isso, modificamos nossa função para isso:




Colocamos a palavra-chave [code] where [/code] (geralmente identamos até onde estão os pipes) e definimos variáveis ou funções. Esses nomes são visíveis dentro dos guards e nos permitem não ficar nos repetindo. Se decidirmos que iremos calcular o <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a> de um modo diferente, precisamos mudar apenas uma vez. Podemos avançar um pouco e deixar nossa função assim:



Os nomes criação na seção where só são visíveis dentro da função, então não temos de nos preocupar com elas poluindo o namespace de outras funções. Note também que todos os nomes foram alinhados na mesma coluna. Se não o fizéssemos, Haskell ficaria confuso e não saberia que eles fazem parte do mesmo bloco.

Associações <i>where</i> não são compartilhadas entre diferentes patterns. Se você quer que vários patterns da mesma função compartilhem um determinado nome, você deve especificá-lo como global.

Você ainda pode usar <em>pattern match</em> em where banners! Poderíamos reescrever a seção where anterior como:


Faremos ainda outra função extremamente necessária que recebe nome e sobrenome e retorna suas iniciais.



Poderíamos fazer esse pattern matching diremaente nos parâmetros da função (o que resultaria em um código mais limpo) mas é que não podemos e usar esse tipo de vínculo diretamente nos parâmetros da função).

Assim como definimos constantes em blocos where, você ainda pode definir funções. Voltando ao nosso amado tema de programação, vamos fazer uma função que pega uma lista de pesos/altura e retorna sua lista de <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a>.


E por hoje é só! A razão pela qual demos o [code] <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a> [/code] como exemplo de função é que não poderíamos calcular diretamente nos seus parâmetros.  Se vermos a lista passada pela função, veremos que cada par possui um <a href="http://pt.wikipedia.org/wiki/%C3%8Dndice_de_massa_corporal"><acronym title="Índice de massa corporal">IMC</acronym></a> diferenciado.

Associações <i>where</i>  também podem ser aninhadas. É comum criar uma função e definir algum helper com suas cláusulas com funções e daí criar funções helper com suas próprias cláusulas  <i>where</i>.
