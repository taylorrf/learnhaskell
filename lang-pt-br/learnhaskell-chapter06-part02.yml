title: Alguma ordem-superioridade está em ordem

text: Funções podem receber funções como parâmetros e também retornar funções. Para ilustrar isto, nós vamos fazer uma função que recebe uma função e aplica ela duas vezes em algo!




Antes de mais nada, repare na declaração de tipo. Antes, nós não precisamos de parênteses porque <span class="fixed">-&gt;</span> 
é naturalmente associativa à direita. Entretando, aqui, eles são obrigatórios. Eles indicam que o primeiro parâmetro é uma função que recebe algo e retorna esta mesma coisa. O segundo parâmetro é algo deste tipo também e o valor de retorno é também do mesmo tipo. Nós também poderíamos ler esta declaração de uma forma mais curried, mas para nos poupar desta dor de cabeça, nós vamos apenas dizer que esta função recebe dois parâmetros e retorna uma coisa. O primeiro parâmetro é uma função (do tipo <span class="fixed">a -&gt; a</span>) e o seegundo é o mesmo <span class="fixed">a</span>. A função pode ser também <span class="fixed">Int -&gt; Int</span> ou <span class="fixed">String -&gt; String</span> ou qualquer outra coisa. Neste caso, o segundo parâmetro também deverá ser deste tipo.

Nota: De agora em diante, nós diremos que funções recebem vários argumentos, apesar do fato de que cada função recebe apenas um parâmetro e retorna uma função parcialmente aplicada até chegarmos à uma função que retorna um valor sólido. Então, em nome da simplicidade, diremos que <span class="fixed">a -&gt; a -&gt; a</span> recebe dois parâmetros, apesar de sabermos o que realmente está ocorrendo por debaixo dos panos.


O corpo da função é bem simples. Apenas usamos o parâmetro <span class="fixed">f</span> como uma função, aplicando <span class="fixed">x</span> à ela ao separá-los com um espaço e então aplicando o resultado a <span class="fixed">f</span> novamente. De qualque modo, brincando com a função:

O quão legal e a utilidade da aplicação parcial é evidente. Se a nossa função requer que passemos à ela uma funlção que recebe apenas um parâmetro, nós podemos apenas aplicar parcialmente uma função no ponto onde se recebe apenas um parâmetro e então passar esta.




Agora nós vamos usar programação de ordem superior para implementar uma função realmente útil que está na biblioteca padrão. Ela se chama <span class="fixed">zipWith</span>. Ela recebe uma função e duas listas como parâmetros e então junta as duas listas aplicando a função entre os elementos correspondentes. Aqui está como nós vamos implementá-la:



Olhe a declaração do tipo. O primeiro parâmetro é uma função que recebe duas coisas e produz uma terceira. Elas não precisam ser do mesmo tipo, mas podem. O segundo e o terceiro parâmetros são listas. O resultado é também uma lista. O primeiro tem que ser uma lista de <span class="fixed">a</span>s, porque a função de junção recebe <span class="fixed">a</span>s como primeiros argumentos. A segunda tem que ser uma lista de <span class="fixed">b</span>s, porque o segundo argumento da função é do tipo <span class="fixed">b</span>. O resultado é uma lista de <span class="fixed">c</span>s. Se a declaração do tipo de uma função diz que ela aceita uma função <span class="fixed">a -&gt; b -&gt; c</span> como parâmetro, ela também aceitará uma função <span class="fixed">a -&gt; a -&gt; a</span>, mas não o contrário! Lembre-se de que, quando você está fazendo funções, especialmente as de ordem superior, e você não está seguro sobre o tipo, você pode simplesmente tentar omitir a declaração do tipo e então verificar o que o Haskell infere que seja, usando <span class="fixed">t:</span>.

A ação na função é bem parecida com a <span class="fixed">zip</span> normal. As condições limite são as mesmas, mas há um argumento extra, qual seja, a função de junção, mas este argumento não importa nas condições limite, então usamos um <span class="fixed">_</span> para ele. E o corpo da função no último <i>pattern</i> é também parecido com <span class="fixed">zip</span>, mas ele não faz <span class="fixed">(x,y)</span>, e sim <span class="fixed">f x y</span>. Uma única função de ordem superior pode ser usada para uma enorme variedade de tarefas se é suficientemente geral. Aqui está uma pequena demonstração de todas as diferentes coisas que a nossa função <span class="fixed">zipWith'</span> é capaz de fazer:



Como você pode ver, uma única função de ordem superior pode ser usada de modos muito versáteis. A programação imperativa utiliza normalmente coisas como iterações com <i>for</i>, iterações com <i>while</i>, setar algo à uma variável, verificar seu estado, etc. para atigir um certo comportamento e então envolve isso em uma interface, como em uma função. Já a programação funcional, utiliza funções de ordem superior para abstrair padrões comuns, como examinar duas listas aos pares e fazer algo nestes pares ou receber um conjunto de soluções e eliminar as que você não precisa.

Nós vamos implementar outra função que também já está na biblioteca padrão, chamada <span class="fixed">flip</span>. <i>Flip</i> simplesmente recebe uma função e retorna uma função que é parecida com a função original mas cujos primeiros dois argumentos são invertidos. Nós podemos implementá-la assim:



Lendo a declaração do tipo, nós dizemos que ela recebe uma função que recebe um <span class="fixed">a</span> e um <span class="fixed">b</span> e retorna uma função que recebe um <span class="fixed">b</span> e um <span class="fixed">a</span>. Mas justamente porque funções são <i>curried</i> por padrão, o segundo par de parênteses é na verdade desnecessário, porque <span class="fixed">-&gt;</span> é associativo à direita por padrão. <span class="fixed">(a -&gt; b -&gt; c) -&gt; (b -&gt; a -&gt; c)</span> é o mesmo que <span class="fixed">(a -&gt; b -&gt; c) -&gt; (b -&gt; (a -&gt; c))</span>, o que é o mesmo que <span class="fixed">(a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</span>. Nós escrevemos que <span class="fixed">g x y = f y x</span>. Se isso é verdade, então <span class="fixed">f y x = g x y</span> também deve ser, certo? Tendo isso em mente, nós podemos definir esta função de uma forma ainda mais simples.




Aqui, nós tiramos vantagem do fato de que funções são <i>curried</i>. Quando nós chamamos <span class="fixed">flip' f</span> sem os parâmetros <span class="fixed">x</span> e <span class="fixed">y</span>, ela vai retornar uma <span class="fixed">f</span> que recebe estes dois parâmetros, mas os chama invertidos. Mesmo que funções invertidas sejam normalmente passadas para outras funções, nós tiramos vantagem do <i>currying</i> quando fazemos funções de ordem superior pensando adiante e escrevendo quando o seu resultado final seria se ela fosse chamada totalmente aplicada.
