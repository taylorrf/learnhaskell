title: Heathrow to London

text: Our next problem is this: your plane has just landed in England and you rent a car. You have a meeting really soon and you have to get from Heathrow Airport to London as fast as you can (but safely!).

There are two main roads going from Heathrow to London and there's a number of regional roads crossing them. It takes you a fixed amount of time to travel from one crossroads to another. It's up to you to find the optimal path to take so that you get to London as fast as you can! You start on the left side and can either cross to the other main road or go forward.

As you can see in the picture, the shortest path from Heathrow to London in this case is to start on main road B, cross over, go forward on A, cross over again and then go forward twice on B. If we take this path, it takes us 75 minutes. Had we chosen any other path, it would take more than that.
Our job is to make a program that takes input that represents a road system and print out what the shortest path across it is. Here's what the input would look like for this case:

To mentally parse the input file, read it in threes and mentally split the road system into sections. Each section is comprised of a road A, road B and a crossing road. To have it neatly fit into threes, we say that there's a last crossing section that takes 0 minutes to drive over. That's because we don't care where we arrive in London, as long as we're in London.
Just like we did when solving the RPN calculator problem, we're going to solve this problem in three steps:

- Forget Haskell for a minute and think about how we'd solve the problem by hand
- Think about how we're going to represent our data in Haskell
- Figure out how to operate on that data in Haskell so that we produce at a solution


In the RPN calculator section, we first figured out that when calculating an expression by hand, we'd keep a sort of stack in our minds and then go over the expression one item at a time. We decided to use a list of strings to represent our expression. Finally, we used a left fold to walk oevr the list of strings while keeping a stack to produce a solution.

Okay, so how would we figure out the shortest path from Heathrow to London by hand? Well, we can just sort of look at the whole picture and try to guess what the shortest path is and hopefully we'll make a guess that's right. That solution works for very small inputs, but what if we have a road that has 10,000 sections? Yikes! We also won't be able to say for certain that our solution is the optimal one, we can just sort of say that we're pretty sure.

That's not a good solution then. Here's a simplified picture of our road system:

Alright, can you figure out what the shortest path to the first crossroads (the first blue dot on A, marked <i>A1</i>) on road A is? That's pretty trivial. We just see if it's shorter to go directly forward on A or if it's shorter to go forward on B and then cross over. Obviously, it's cheaper to go forward via B and then cross over because that takes 40 minutes, whereas going directly via A takes 50 minutes. What about crossroads <i>B1</i>? Same thing. We see that it's a lot cheaper to just go directly via B (incurring a cost of 10 minutes), because going via A and then crossing over would take us a whole 80 minutes!
Now we know what the cheapest path to <i>A1</i> is (go via B and then cross over, so we'll say that's [code]B, C[/code] with a cost of 40) and we know what the cheapest path to <i>B1</i> is (go directly via B, so that's just [code]B[/code], going at 10). Does this knowledge help us at all if we want to know the cheapest path to the next crossroads on both main roads? Gee golly, it sure does!

Let's see what the shortest path to <i>A2</i> would be. To get to <i>A2</i>, we'll either go directly to <i>A2</i> from <i>A1</i> or we'll go forward from <i>B1</i> and then cross over (remember, we can only move forward or cross to the other side). And because we know the cost to <i>A1</i> and <i>B1</i>, we can easily figure out what the best path to <i>A2</i> is. It costs 40 to get to <i>A1</i> and then 5 to get from <i>A1</i> to <i>A2</i>, so that's [code]B, C, A[/code] for a cost of 45. It costs only 10 to get to <i>B1</i>, but then it would take an additional 110 minutes to go to <i>B2</i> and then cross over! So obviously, the cheapest path to <i>A2</i> is [code]B, C, A[/code]. In the same way, the cheapest way to <i>B2</i> is to go forward from <i>A1</i> and then cross over.


<em>Maybe you're asking yourself</em>: but what about getting to <i>A2</i> by first crossing over at <i>B1</i> and then going on forward? Well, we already covered crossing from <i>B1</i> to <i>A1</i> when we were looking for the best way to <i>A1</i>, so we don't have to take that into account in the next step as well.

Now that we have the best path to <i>A2</i> and <i>B2</i>, we can repeat this indefinitely until we reach the end. Once we've gotten the best paths for <i>A4</i> and <i>B4</i>, the one that's cheaper is the optimal path!
So in essence, for the second section, we just repeat the step we did at first, only we take into account what the previous best paths on A and B. We could say that we also took into account the best paths on A and on B in the first step, only they were both empty paths with a cost of 0.
Here's a summary. To get the bast path from Heathrow to London, we do this: first we see what the best path to the next crossroads on main road A is. The two options are going directly forward or starting at the opposite road, going forward and then crossing over. We remember the cost and the path. We use the same method to see what the best path to the next crossroads on main road B is and remember that. Then, we see if the path to the next crossroads on A is cheaper if we go from the previous A crossroads or if we go from the previous B crossroads and then cross over. We remember the cheaper path and then we do the same for the crossroads opposite of it. We do this for every section until we reach the end. Once we've reached the end, the cheapest of the two paths that we have is our optimal path!

So in essence, we keep one shortest path on the A road and one shortest path on the B road and when we reach the end, the shorter of those two is our path. We now know how to figure out the shortest path by hand. If you had enough time, paper and pencils, you could figure out the shortest path through a road system with any number of sections.

Next step! How do we represent this road system with Haskell's data types? One way is to think of the starting points and crossroads as nodes of a graph that point to other crossroads. If we imagine that the starting points actually point to each other with a road that has a length of one, we see that every crossroads (or node) points to the node on the other side and also to the next one on its side. Except for the last nodes, they just point to the other side. 


A node is either a normal node and has information about the road that leads to the other main road and the road that leads to the next node or an end node, which only has information about the road to the other main road. A road keeps information about how long it is and which node it points to. For instance, the first part of the road on the A main road would be [code]Road 50 a1[/code] where [code]a1[/code] would be a node [code]Node x y[/code], where [code]x[/code] and [code]y[/code] are roads that point to <i>B1</i> and <i>A2</i>.

Another way would be to use [code]Maybe[/code] for the road parts that point forward. Each node has a road part that point to the opposite road, but only those nodes that aren't the end ones have road parts that point forward.


This is an alright way to represent the road system in Haskell and we could certainly solve this problem with it, but maybe we could come up with something simpler? If we think back to our solution by hand, we always just checked the lengths of three road parts at once: the road part on the A road, its opposite part on the B road and part C, which touches those two parts and connects them. When we were looking for the shortest path to <i>A1</i> and <i>B1</i>, we only had to deal with the lengths of the first three parts, which have lengths of 50, 10 and 30. We'll call that one section. So the road system that we use for this example can be easily represented as four sections: [code]50, 10, 30[/code], [code]5, 90, 20[/code], [code]40, 2, 25[/code], and [code]10, 8, 0[/code].
It's always good to keep our data types as simple as possible, although not any simpler!



This is pretty much perfect! It's as simple as it goes and I have a feeling it'll work perfectly for implementing our solution. [code]Section[/code] is a simple algebraic data type that holds three integers for the lenghts of its three road parts. We introduce a type synonym as well, saying that [code]RoadSystem[/code] is a list of sections. 


We could also use a triple of [code](Int, Int, Int)[/code] to represent a road section. Using tuples instead of making your own algebraic data types is good for some small localized stuff, but it's usually better to make a new type for things like this. It gives the type system more information about what's what. We can use [code](Int, Int, Int)[/code] to represent a road section or a vector in 3D space and we can operate on those two, but that allows us to mix them up. If we use [code]Section[/code] and [code]Vector[/code] data types, then we can't accidentally add a vector to a section of a road system.

Our road system from Heathrow to London can now be represented like this:



All we need to do now is to implement the solution that we came up with previously in Haskell. What should the type declaration for a function that calculates a shortest path for any given road system be? It should take a road system as a parameter and return a path. We'll represent a path as a list as well. Let's introduce a [code]Label[/code] type that's just an enumeration of either [code]A[/code], [code]B[/code] or [code]C[/code]. We'll also make a type synonym: [code]Path[/code].



Our function, we'll call it [code]optimalPath[/code] should thus have a type declaration of [code]optimalPath :: RoadSystem -&gt; Path[/code]. If called with the road system [code]heathrowToLondon[/code], it should return the following path:


We're going to have to walk over the list with the sections from left to right and keep the optimal path on A and optimal path on B as we go along. We'll accumulate the best path as we walk over the list, left to right. What does that sound like? Ding, ding, ding! That's right, A LEFT FOLD!
When doing the solution by hand, there was a step that we repeated over and over again. It involed checking the optimal paths on A and B so far and the current section to produce the new optimal paths on A and B. For instance, at the beginning the optimal paths were [code][][/code] and [code][][/code] for A and B respectively. We examined the section [code]Section 50 10 30[/code] and concluded that the new optimal path to <i>A1</i> is [code][(B,10),(C,30)][/code] and the optimal path to <i>B1</i> is [code][(B,10)][/code]. If you look at this step as a function, it takes a pair of paths and a section and produces a new pair of paths. The type is [code](Path, Path) -&gt; Section -&gt; (Path, Path)[/code]. Let's go ahead and implement this function, because it's bound to be useful.

<em>Hint:</em> it will be useful because [code](Path, Path) -&gt; Section -&gt; (Path, Path)[/code] can be used as the binary function for a left fold, which has to have a type of [code]a -&gt; b -&gt; a[/code]

What's going on here? First, calculate the optimal price on road A based on the best so far on A and we do the same for B. We do [code]sum $ map snd pathA[/code], so if [code]pathA[/code] is something like [code][(A,100),(C,20)][/code], [code]priceA[/code] becomes [code]120[/code]. [code]forwardPriceToA[/code] is the price that we would pay if we went to the next crossroads on A if we went there directly from the previous crossroads on A. It equals the best price to our previous A, plus the length of the A part of the current section. [code]crossPriceToA[/code] is the price that we would pay if we went to the next A by going forward from the previous B and then crossing over. It's the best price to the previous B so far plus the B length of the section plus the C length of the section. We determine [code]forwardPriceToB[/code] and [code]crossPriceToB[/code] in the same manner. 

Now that we know what the best way to A and B is, we just need to make the new paths to A and B based on that. If it's cheaper to go to A by just going forwards, we set [code]newPathToA[/code] to be [code](A,a):pathA[/code]. Basically we prepend the [code]Label[/code] [code]A[/code] and the section length [code]a[/code] to the optimal path path on A so far. Basically, we say that the best path to the next A crossroads is the path to the previous A crossroads and then one section forward via A. Remember, [code]A[/code] is just a label, whereas [code]a[/code] has a type of [code]Int[/code]. Why do we prepend instead of doing [code]pathA ++ [(A,a)][/code]? Well, adding an element to the beginning of a list (also known as consing) is much faster than adding it to the end. This means that the path will be the wrong way around once we fold over a list with this function, but it's easy to reverse the list later. If it's cheaper to get to the next A crossroads by going forward from road B and then crossing over, then [code]newPathToA[/code] is the old path to B that then goes forward and crosses to A. We do the same thing for [code]newPathToB[/code], only everything's mirrored.

Finally, we return [code]newPathToA[/code] and [code]newPathToB[/code] in a pair.
Let's run this function on the first section of [code]heathrowToLondon[/code]. Because it's the first section, the best paths on A and B parameter will be a pair of empty lists.


Remember, the paths are reversed, so read them from right to left. From this we can read that the best path to the next A is to start on B and then cross over to A and that the best path to the next B is to just go directly forward from the starting point at B.

<em>Optimization tip:</em> when we do [code]priceA = sum $ map snd pathA[/code], we're calculating the price from the path on every step. We wouldn't have to do that if we implemented [code]roadStep[/code] as a [code](Path, Path, Int, Int) -&gt; Section -&gt; (Path, Path, Int, Int)[/code] function where the integers represent the best price on A and B.

Now that we have a function that takes a pair of paths and a section and produces a new optimal path, we can just easily do a left fold over a list of sections. [code]roadStep[/code] is called with [code]([],[])[/code] and the first section and returns a pair of optimal paths to that section. Then, it's called with that pair of paths and the next section and so on. When we've walked over all the sections, we're left with a pair of optimal paths and the shorter of them is our answer. With this in mind, we can implement [code]optimalPath[/code].



We left fold over [code]roadSystem[/code] (remember, it's a list of sections) with the starting accumulator being a pair of empty paths. The result of that fold is a pair of paths, so we pattern match on the pair to get the paths themselves. Then, we check which one of these was cheaper and return it. Before returning it, we also reverse it, because the optimal paths so far were reversed due to us choosing consing over appending.
Let's test this!



This is the result that we were supposed to get! Awesome! It differs from our expected result a bit because there's a step [code](C,0)[/code] at the end, which means that we cross over to the other road once we're in London, but because that crossing doesn't cost anything, this is still the correct result.
We have the function that finds an optimal path based on, now we just have to read a textual representation of a road system from the standard input, convert it into a type of [code]RoadSystem[/code], run that through our [code]optimalPath[/code] function and print the path.
First off, let's make a function that takes a list and splits it into groups of the same size. We'll call it [code]groupsOf[/code]. For a parameter of [code][1..10][/code], [code]groupsOf 3[/code] should return [code][[1,2,3],[4,5,6],[7,8,9],[10]][/code].

A standard recursive function. For an [code]xs[/code] of [code][1..10][/code] and an [code]n[/code] of [code]3[/code], this equals [code][1,2,3] : groupsOf 3 [4,5,6,7,8,9,10][/code]. When the recursion is done, we get our list in groups of three. And here's our [code]main[/code] function, which reads from the standard input, makes a [code]RoadSystem[/code] out of it and prints out the shortest path:


First, we get all the contents from the standard input. Then, we call [code]lines[/code] with our contents to convert something like [code]"50\n10\n30\n...[/code] to [code]["50","10","30"..[/code] and then we map [code]read[/code] to that to convert it to a list of numbers. We call [code]groupsOf 3[/code] on it so that we turn it to a list of lists of length 3. We map the lambda [code](\[a,b,c] -&gt; Section a b c)[/code] over that list of lists. As you can see, the lambda just takes a list of length 3 and turns it into a section. So [code]roadSystem[/code] is now our system of roads and it even has the correct type, namely [code]RoadSystem[/code] (or [code][Section][/code]). We call [code]optimalPath[/code] with that and then get the path and the price in a nice textual representation and print it out.

We save the following text 


in a file called [code]paths.txt[/code] and then feed it to our program.


Works like a charm! You can use your knowledge of the [code]Data.Random[/code] module to generate a much longer system of roads, which you can then feed to what we just wrote. If you get stack overflows, try using [code]foldl'[/code] instead of [code]foldl[/code], because [code]foldl'[/code] is strict.