title: Data.Map

text: Listas de associação (também chamadas de dicionários) são lista usadas para armazenar pares de chave e valor, onde sua ordem não é considerada. Por exemplo, podemos usar uma lista de assciação para guardar números de telefone - que seriam os valores - junto do nome dos donos - chaves. A ordem que esses dados estão armazenados não importa para nós, desde que consigamos o número certo ao pesquisar por uma pessoa.

O modo mais óbvio de armazenar listas de associação em Haskell seria uma lista de pares. O primeiro componente do par seria a chave, enquanto o outro o valor. Aqui vai um exemplo de uma lista de associação com números de telefone:



Tirando a identação estranha, essa é uma lista de pares de strings. O objetivo mais comum ao lidar com listas de associação é a busca por chave. Vamos criar uma função que procura por um dado valor de chave.




Extremamente simples. A função recebe uma chave e uma lista, filtra a lista para que permaneçam apenas os que têm chave correspondente e retorna o primeiro par chave-valor. Mas o que acontece ao procurarmos por uma chave inexistente? Hmm, no caso tentaríamos pegar o primeiro elemento de uma lista vazia, gerando um runtime error. Mas temos que fazer nossos programas para que sejam um pouco mais difíceis de travar, então usaremos o tipo [code] Maybe [/code]. Se não encontrar uma chave, retornará [code] Nothing [/code]. Se encontrar, retornará [code] Just something [/code], onde "something" é o valor correspondente à chave.




Preste atenção à declaração de tipo. Recebe uma chave que pode ser igualada, uma lista de associação e talvez devolva um valor. Parece correto.

Essa é uma função de agenda de contatos que trabalha com uma lista. A edge condition, separar a lista no primeiro elemento, chamadas recursivas, tudo aí. Isso é o pattern folding clássico. Vamos tentar implementar com folds.



<em>Note:</em> Geralmente é melhor usar folds para listas de padrões recursivos ao invés de escrever explicitamente a recursão porque é mais fácil de se ler. Todos sabem que é um fold ao ver a chamada à função [code] foldr [/code], mas toma mais tempo para entender todo o processo.





Que beleza! Agora falta você usar sua nova agenda para ver se não fica só na pesquisa.

Nós acabamos de implementar a função [code] lookup [/code] do [code] Data.List [/code]. Se queremos achar um valor correspondente a uma chave, temos que percorrer todos os elementos até encontrá-lo. O módulo [code] Data.Map [/code] oferece listas de associação muito mais rápidas (porque elas são implementadas internamente com árvores) e ainda provê algumas funções úteis. De agora em diante usaremos mapas ao invés de listas de associação.

Já que [code] Data.Map [/code] exporta funções que conflitam com outras de [code] Prelude [/code] e [code] Data.List [/code], faremos uma importação qualificada.




Coloque esse comando para importação no script e carregue-o via GHCI.

Chega de enrolar e vamos ver o que o [code] Data.Map [/code] nos guarda! Aí vai um resumo rápido de suas funções.

A função [function] fromList [/function] recebe uma lista de associações (na forma de uma lista mesmo) e retorna um mapa com a mesma estrutura.



Se existirem chaves duplicadas na lista de associação original, as sobressalentes são descartadas. Esse é o tipo de [code] fromList [/code]




Digamos que recebe uma lista de pares de tipos [code] k [/code] e [code] v [/code] e retorna um mapa com chaves de tipo [code] k [/code] e tipo [code] v [/code]. Perceba que quando você está criando listas de associação com listas, as chaves só precisam ser possíveis de serem igualadas (terem tipos pertencentes à typeclass [code] Eq [/code]) mas não necessariamente ordenáveis. Essa é a essência do módulo [code] Data.Map [/code]. Ele precisa que as chaves sejam ordenáveis para organizá-las na forma de uma árvore.

É sempre aconselhável usar o [code] Data.Map [/code] para associações chave-valor, a menos que o tipo não esteja na typeclass [code] Ord [/code].

[function] empty [/function] representa um mapa vazio. Não precisa de nenhum argumento, só retorna um mapa vazio.



[function] insert [/function] recebe uma chave, um valor e um mapa e retorna um novo mapa igual ao antigo, mas com chaves e valor adicionados.




Nós podemos implementar nosso próprio [code] fromList [/code] usando um mapa vazio, [code] insert [/code] e um fold. Veja só:




É um fold bastante simples. Começamos com um mapa vazio e dobramos à direita, inserindo os pares de chave-valor no acumulado em cada passo.

[function] null [/function] testa se um mapa está vazio.




[function] size [/function] reporta o tamanho de um mapa.




[function] singleton [/function] recebe uma chave e um valor e cria um mapa com apenas esses dados.





[function] lookup [/function] funciona como o [code] Data.List [/code] [code] lookup [/code], mas opera apenas em mapas. Retorna [code] Just something [/code] se encontrar algo à procura da key, [code] Nothing [/code] se não

[function] member [/function] é um predicado que recebe uma chave e um mapa e diz se a chave existe ou não no mapa.




[function] map [/function] e [function] filter [/function] funcionam semelhantemente aos irmãos das listas.




[function] toList [/function] é o inverso da [code] fromList [/code].




[function] keys [/function] e [function] elems [/function] retorna listas de chaves e valores, respectivamente. [code] keys [/code] é o equivalente a [code] map fst . Map.toList [/code] e [code] elems [/code] é o de [code] map snd . Map.toList [/code].

[function] fromListWith [/function] é uma função muito legal. Age como [code] fromList [/code], mas ao invés de discartar as chaves duplicadas, recebe também uma função que decide o que fazer com elas. Imaginando que uma garota pode ter vários números e temos uma lista de associação como essa.




Agora se quisermos usar [code] fromList [/code] para criar um mapa, perderemos número! Então é assim que resolveremos:




Se uma chave duplicada for encontrada, a função que passamos será usada para combinar os valores das chaves em outro valor. Poderíamos primeiro ter listas únicas para os valores e usarmos [code] ++ [/code] para fazer a combinação.




Muito elegante! Outro  caso é estarmos criando um mapa com base em uma lista de associação e quando uma chave estiver duplicada, for mantido o maior valor.


Ou somá-los na mesma chave.



[function] insertWith [/function] é para [code] insert [/code] o que [code] fromListWith [/code] é para [code] fromList [/code]. Insere um par chave-valor em um mapa e em caso da chave já existir, usa a função passada para determinar o que fará com o par.




Estas são apenas algumas funções do [code] Data.Map [/code]. Você pode ainda ver uma lista completa na <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/containers/Data-Map.html#v%3Aassocs">documentação</a>.
